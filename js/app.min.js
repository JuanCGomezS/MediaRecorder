!(function (o, s, e) {
  let media;
  let mediarecorder;
  const $startButton = document.querySelector("#startButton");

  $startButton.addEventListener("click", async () => {
    const resolutionSelect = document.querySelector("#resolution");
    const resolution = resolutionSelect.value;

    const framerateSelect = document.querySelector("#framerate");
    const framerate = framerateSelect.value;

    const enableSoundCheckbox = document.querySelector("#enableSound");
    const enableSound = enableSoundCheckbox.checked;

    const maxDurationInput = document.querySelector("#maxDuration");
    const maxDuration = maxDurationInput.value;

    const enableMicCheckbox = document.querySelector("#enableMic");
    const enableMic = enableMicCheckbox.checked;

    let width;
    switch (resolution) {
      case "360":
        width = 360;
        break;
      case "480":
        width = 480;
        break;
      case "576":
        width = 576;
        break;
      case "720":
        width = 1280;
        break;
      case "1080":
        width = 1920;
        break;
      case "4k":
        width = 3840;
        break;
    }

    media = await navigator.mediaDevices.getDisplayMedia({
      video: {
        width: { ideal: width },
        height: { ideal: (width * 9) / 16 },
        frameRate: { ideal: parseInt(framerate) },
      },
      audio: enableSound,
    });

    let audioStream;
    if (enableMic) {
      audioStream = await navigator.mediaDevices.getUserMedia({
        audio: enableMic,
      });
    } else if (!enableSound) {
      audioStream = await navigator.mediaDevices.getUserMedia({
        audio: enableMic,
      });
    }

    let combinedStream;
    if (audioStream) {
      combinedStream = new MediaStream([
        ...media.getVideoTracks(),
        ...audioStream.getAudioTracks(),
      ]);
    } else {
      combinedStream = media;
    }

    mediarecorder = new MediaRecorder(combinedStream, {
      mimeType: "video/webm;codecs=vp8,opus",
    });
    mediarecorder.start();

    const [video] = combinedStream.getVideoTracks();
    video.addEventListener("ended", () => {
      mediarecorder.stop();
    });

    mediarecorder.addEventListener("dataavailable", (e) => {
      const link = document.createElement("a");
      link.href = URL.createObjectURL(e.data);
      link.download = "captura.webm";
      link.click();
    });

    if (maxDuration > 0.5) {
      setTimeout(() => {
        if (mediarecorder && mediarecorder.state !== "inactive") {
          mediarecorder.stop();
          combinedStream.getTracks().forEach((track) => track.stop());
        }
      }, maxDuration * 60000);
    }
  });

  const $stopButton = document.querySelector("#stopButton");

  $stopButton.addEventListener("click", () => {
    if (mediarecorder && mediarecorder.state !== "inactive") {
      mediarecorder.stop();
      media.getTracks().forEach((track) => track.stop());
    }
  });
})(window.jQuery, window, document);
